# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

scheme = "OceanDesignSystem"
team = "57KSFR5UHN"
adhoc_provision_profile = "match AdHoc br.com.blu.ocean.DesignSystem"
appstore_provision_profile = "match AppStore br.com.blu.ocean.DesignSystem"
bundle_identifier = "br.com.blu.ocean.DesignSystem"
xcodeproj = "./OceanDesignSystem.xcodeproj"

platform :ios do
  desc "Mandatory for use in circle-ci"
  before_all do
    
    setup_circle_ci

  end

  desc "Build and Test App"
  lane :build_test do 
    run_tests(scheme: "OceanDesignSystem")
  end

  desc "Prepare new version on master"
  lane :prepare_new_version do |options|
    build_number = increment_build_number(xcodeproj: xcodeproj)
    version = get_version_number(xcodeproj: xcodeproj, target: scheme)

    newTag = "OceanDesignSystem-" + version + "-" + build_number
    puts("Commit in develop increment version" + newTag)
    sh("git commit -am 'chore: update version v" + newTag + " [ci skip]'")
    sh("git push")
  end

  desc "Upload to TestFlight"
  lane :beta_testflight do
    increment_build_number()
    
    get_profiles_step(type: 'appstore')
    get_profiles_step(type: 'development')
    
    archive_app_step(
      export_method: 'app-store', 
      bundle_identifier: bundle_identifier, 
      provision_profile: appstore_provision_profile, 
      team: team 
    )

    upload_testflight_step()

  end

  private_lane :get_profiles_step do |options|
    api_key = app_store_connect_api_key(
      key_id: "#{ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"]}",
      issuer_id: "#{ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]}",
      key_content: "#{ENV["APP_STORE_CONNECT_API_KEY_KEY"]}".gsub('\n', '\\n'),
      in_house: false
    )

    match(
      api_key: api_key,
      git_basic_authorization: "#{ENV["MATCH_GIT_BASIC_AUTHORIZATION"]}",
      app_identifier: bundle_identifier,
      type: options[:type],
      readonly: is_ci
    )
  end

  private_lane :archive_app_step do |options|
    build_app(
      scheme: scheme,
      export_options: {
        method: options[:export_method],
        provisioningProfiles: { 
          options[:bundle_identifier] => options[:provision_profile]
        }
      }
    )
  end

  private_lane :upload_testflight_step do 
    api_key = app_store_connect_api_key(
      key_id: "#{ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"]}",
      issuer_id: "#{ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]}",
      key_content: "#{ENV["APP_STORE_CONNECT_API_KEY_KEY"]}".gsub('\n', '\\n'),
      in_house: false
    )

    upload_to_testflight(
      api_key: api_key,
      app_identifier: bundle_identifier,
      skip_waiting_for_build_processing: true
    )
  end
end
